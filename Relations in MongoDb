
One to One Relations - Using embedded document
-----------------------
Eg; 

    patients collection
    ----------------------
    db.patients.insertOne({name: "Max", age: 33, diseaseSummary:"summary-max-1"})

    db.patients.insertOne({"_id": ObjectId("5eb8cb65a4a8c705c0393806")}, {$set: {diseaseSummary: "summary-jiss-1"}})


    diseaseSummary collection
    -----------------------------
    > db.diseaseSummaries.insertOne({_id: "summary-max-1", disease: ['cold', 'fever']})

    > db.diseaseSummaries.insertOne({_id: "summary-jiss-1", disease: "malaria"})


to access the diseaseSummary of a patient,

const getId = db.patients.findOne(({"_id": ObjectId("5eb8cb65a4a8c705c0393806")}).diseaseSummary

lagter use this id to access disease of a patient from diseaseSummary collection,

db.diseaseSummaries.findOne({"_id": getId}).disease


so, here instead of creating multiplecollections

create an embedded document of diseaseSummary in patients collection

Eg:

db.patients.insertMany([
...     {"name": "Max",
...      "age": 44,
...     "diseaseSummaary": {
...         "disease": ["cold", "fever"]
...     }
...     },
...     {"name": "Max",
...      "age": 44,
...      "diseaseSummaary": {
...     "disease": "Malaria"
...     }
... }
... ])

Now we can easily diseaseSummary,

> db.patients.findOne({"_id": ObjectId("5eb8ce3c0b8a3c65144d4678")}).diseaseSummaary.disease
[ "cold", "fever" ]


One to One Using reference
-----------------------------

a person has one car.
a car belongs to one person.


Eg:
    > db.persons.findOne()
{
        "_id" : ObjectId("5eb9ffbf57e4f06452dfac68"),
        "name" : "Max",
        "age" : 33,
        "cars" : {
                "model" : "BMW",
                "price" : 450000
        }
}

here it is ok. butout application needs to get only car 
details.
> db.persons.findOne().cars.model
BMW
> db.persons.findOne().cars.price
450000

so here v got it, but we access it from persons collection,
so it is unneccessary to get person collection andthen access 
car data.

instead v create a collection for persons and for cars.
and set reference for one to other using ObjectId.


Eg:

> db.persons.findOne()
{ "_id" : ObjectId("5eba014757e4f06452dfac69"), "name" : "max", "age" : 33 }

> db.cars.findOne()
{
        "_id" : ObjectId("5eba017e57e4f06452dfac6a"),
        "model" : "bmw",
        "price" : 42332,
        "engine" : "petrol",
        "owner" : ObjectId("5eba014757e4f06452dfac69")
}


here v set reference on cars collection by setting owner field 
with ObjectId of one person.

now to get cars information, can direclty access cars collection
instead of person collection.

this is one to one Relations sing reference.


One to Many Relation - embedded
-------------------------------

one question has many answeres - one answer belongs to one question.

> db.questions.findOne()
{
    "_id" : ObjectId("5eba0d45d1374e5a63d9814d"),
    "creator" : "Max",
    "question" : "How it Works?",
    "answers" : [
            {
                    "text" : "answerOne"
            },
            {
                    "text" : "answerTwo"
            }
    ]
}

so here there is one question that has many answers - which is a list of documents.

now we can fetcg the answers from questions collection,

> db.questions.findOne().answers
[ { "text" : "answerOne" }, { "text" : "answerTwo" } ]
> const a = db.questions.findOne().answers
> a
[ { "text" : "answerOne" }, { "text" : "answerTwo" } ]
> a.forEach(r => printjson(r))
{ "text" : "answerOne" }
{ "text" : "answerTwo" }
> a.forEach(r => printjson(r.text))
"answerOne"
"answerTwo"



one to many using references
-----------------------------

one city has many citzens - one citizen belongs to one city

> db.cities.findOne()
{
        "_id" : ObjectId("5eba1694d1374e5a63d9814f"),
        "name" : "kochi",
        "citizens" : [
                {
                        "id" : "citizen-1",
                        "name" : "jissmon"
                },
                {
                        "id" : "citizen-2",
                        "name" : "akash"
                }
        ]
}

here v have to insert large no of citizens in 'citizens' embedded document.
instead v create another collection for 'citizens' that contains citizens data only
and set a reference to 'cities' collection ObjectId of each city.

cities collection
-------------
> db.cities.findOne()
{
        "_id" : ObjectId("5eba183ed1374e5a63d98150"),
        "name" : "kochi",
        "cordinates" : {
                "lat" : 45,
                "lon" : 46
        }
}

citizens collection
-----------------------
> db.citizens.find().pretty()
{
        "_id" : ObjectId("5eba1954d1374e5a63d98151"),
        "name" : "jissmon",
        "city" : ObjectId("5eba183ed1374e5a63d98150")
}
{
        "_id" : ObjectId("5eba1954d1374e5a63d98152"),
        "name" : "akhil",
        "city" : ObjectId("5eba183ed1374e5a63d98150")
}
{
        "_id" : ObjectId("5eba1954d1374e5a63d98153"),
        "name" : "akash",
        "city" : ObjectId("5eba183ed1374e5a63d98150")
}


here v set a reference to  cities collection by adding a city field with value as objectId of city.
so by setting this reference, v can later access city of each citizen.


Example
--------
> const cityId = db.citizens.findOne().city
> db.cities.findOne({_id: cityId})
{
        "_id" : ObjectId("5eba183ed1374e5a63d98150"),
        "name" : "kochi",
        "cordinates" : {
                "lat" : 45,
                "lon" : 46
        }
}
> db.cities.findOne({_id: cityId}).name
kochi



Many to Many - references
-----------------------------

one customer buys many porducts - one product belong to many customers

> db.products.insertOne({name: 'product 1', price: 343})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5eba1fc5d1374e5a63d98154")
}
> db.customers.insertOne({name: 'max', age: 33})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5eba1fd7d1374e5a63d98155")
}
> db.orders.insertOne({customerId: ObjectId("5ebdf1a07ef5b96a0e646526"), productId: ObjectId("5ebdf17b7ef5b96a0e646525")})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5eba207774852e4dc837c765")
}

here this is a sql approach. ie we create collection for
porducts, customers, and orders .
in mongodb, we can do this using just two collections,ie sing references approach

Eg,

products collection
-----------------
> db.products.find().pretty()
{
        "_id" : ObjectId("5ebdf17b7ef5b96a0e646525"),
        "name" : "product-1",
        "price" : 450
}
{
        "_id" : ObjectId("5ebdf5217ef5b96a0e646528"),
        "name" : "product-2",
        "price" : 500
}
{
        "_id" : ObjectId("5ebdf5217ef5b96a0e646529"),
        "name" : "product-3",
        "price" : 100
}
{
        "_id" : ObjectId("5ebdf5217ef5b96a0e64652a"),
        "name" : "product-4",
        "price" : 50
}

customers collection
-------------
> db.customers.insertMany(
... [
...     {
...         "customerName": "Akhil",
...         "customerPhone": 4932749,
...         "products": [{ 
...             "Id": ObjectId("5ebdf5217ef5b96a0e64652a"),
...             "quantity": 4},
...             {
...                 "Id": ObjectId("5ebdf5217ef5b96a0e646529"),

...                 "quantity": 3
...             }]
...     },
...     {
...         "customerName": "Jithin",
...         "customerPhone": 48236484,
...         "products": [{ 
...             "Id": ObjectId("5ebdf5217ef5b96a0e64652a"),
...             "quantity": 4
...         },
...         {
...             "Id": ObjectId("5ebdf5217ef5b96a0e646528"),
...             "quantity": 1
...         }]
...     }
... ])


Many yo Many using embedded
-----------------------------
here v do the embedded ie wih in a single collection and no reference set to any other collection, ie here v ignore prodcts collections - instead added products data as in array of documents.

> db.customers.find().pretty()
{
        "_id" : ObjectId("5ebdf9b17ef5b96a0e64652e"),
        "customerName" : "Jithin",
        "customerPhone" : 48236484,
        "products" : [
                {
                        "productName" : "product-3",
                        "productPrice" : 700,
                        "quantity" : 3
                },
                {
                        "productName" : "product-3",
                        "productPrice" : 700,
                        "quantity" : 3
                }
        ]
}

Main con of this approach is there is ahign probability of data duplication,

since when multiple customers buy same product taht product data is repeated in those customers document.





